{"version":3,"file":"index-TB1TenY1.js","sources":["../../node_modules/react/cjs/react-jsx-runtime.production.min.js","../../node_modules/react/jsx-runtime.js","../../node_modules/react-dom/client.js","../../src/hooks/useTonConnect.ts","../../src/services/nftService.ts","../../src/hooks/useNFTCollection.ts","../../src/components/NFTGallery.tsx","../../src/App.tsx","../../src/components/ErrorPage.tsx","../../src/router.tsx","../../src/main.tsx"],"sourcesContent":["/**\n * @license React\n * react-jsx-runtime.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var f=require(\"react\"),k=Symbol.for(\"react.element\"),l=Symbol.for(\"react.fragment\"),m=Object.prototype.hasOwnProperty,n=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,p={key:!0,ref:!0,__self:!0,__source:!0};\nfunction q(c,a,g){var b,d={},e=null,h=null;void 0!==g&&(e=\"\"+g);void 0!==a.key&&(e=\"\"+a.key);void 0!==a.ref&&(h=a.ref);for(b in a)m.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps,a)void 0===d[b]&&(d[b]=a[b]);return{$$typeof:k,type:c,key:e,ref:h,props:d,_owner:n.current}}exports.Fragment=l;exports.jsx=q;exports.jsxs=q;\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-jsx-runtime.production.min.js');\n} else {\n  module.exports = require('./cjs/react-jsx-runtime.development.js');\n}\n","'use strict';\n\nvar m = require('react-dom');\nif (process.env.NODE_ENV === 'production') {\n  exports.createRoot = m.createRoot;\n  exports.hydrateRoot = m.hydrateRoot;\n} else {\n  var i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n  exports.createRoot = function(c, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.createRoot(c, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n  exports.hydrateRoot = function(c, h, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.hydrateRoot(c, h, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n}\n","import { useTonConnectUI } from '@tonconnect/ui-react'\r\n\r\nexport function useTonConnect() {\r\n  const [tonConnectUI] = useTonConnectUI()\r\n\r\n  return {\r\n    connected: tonConnectUI.connected,\r\n    wallet: tonConnectUI.account,\r\n    connect: () => {\r\n      tonConnectUI.connectWallet()\r\n    },\r\n    disconnect: () => {\r\n      tonConnectUI.disconnect()\r\n    }\r\n  }\r\n} ","import axios from 'axios'\r\nimport TonWeb from 'tonweb'\r\n\r\nconst TON_API_URL = 'https://tonapi.io/v2'\r\nconst TON_API_KEY = import.meta.env.VITE_TON_API_KEY\r\n\r\ninterface NFTMetadata {\r\n  name: string\r\n  description: string\r\n  image: string\r\n}\r\n\r\nexport interface NFTItem {\r\n  id: string\r\n  address: string\r\n  metadata: NFTMetadata\r\n}\r\n\r\nexport async function fetchNFTsByCollection(collectionAddress: string): Promise<NFTItem[]> {\r\n  if (!TON_API_KEY || TON_API_KEY === 'YOUR_TONAPI_KEY') {\r\n    throw new Error('TonAPI key is not configured. Please set VITE_TON_API_KEY in your .env file')\r\n  }\r\n\r\n  try {\r\n    const response = await axios.get(`${TON_API_URL}/nfts/collections/${collectionAddress}/items`, {\r\n      headers: {\r\n        'Authorization': `Bearer ${TON_API_KEY}`,\r\n        'Content-Type': 'application/json'\r\n      }\r\n    })\r\n\r\n    if (!response.data.nft_items) {\r\n      throw new Error('Invalid response format from TonAPI')\r\n    }\r\n\r\n    return response.data.nft_items.map((item: any) => ({\r\n      id: item.address,\r\n      address: item.address,\r\n      metadata: {\r\n        name: item.metadata?.name || 'Unnamed NFT',\r\n        description: item.metadata?.description || 'No description',\r\n        image: item.metadata?.image?.original || 'https://placehold.co/400x400/2a2a2a/white?text=No+Image'\r\n      }\r\n    }))\r\n  } catch (error) {\r\n    if (axios.isAxiosError(error)) {\r\n      if (error.response?.status === 401) {\r\n        throw new Error('Invalid TonAPI key. Please check your VITE_TON_API_KEY in .env file')\r\n      }\r\n      if (error.response?.status === 404) {\r\n        throw new Error('NFT collection not found')\r\n      }\r\n      throw new Error(`TonAPI error: ${error.response?.data?.error || error.message}`)\r\n    }\r\n    console.error('Error fetching NFTs:', error)\r\n    throw new Error('Failed to fetch NFTs from collection')\r\n  }\r\n}\r\n\r\n// Альтернативный метод с использованием TonWeb\r\nexport async function fetchNFTsUsingTonWeb(collectionAddress: string): Promise<NFTItem[]> {\r\n  try {\r\n    const provider = new TonWeb.HttpProvider('https://toncenter.com/api/v2/jsonRPC')\r\n    const tonweb = new TonWeb(provider)\r\n    \r\n    // Создаем адрес коллекции\r\n    const address = new TonWeb.utils.Address(collectionAddress)\r\n    \r\n    // Проверяем существование коллекции\r\n    await tonweb.provider.call2(\r\n      address.toString(),\r\n      'get_collection_data'\r\n    )\r\n\r\n    const nfts: NFTItem[] = []\r\n    \r\n    // Получаем количество NFT в коллекции\r\n    const totalSupply = await tonweb.provider.call2(\r\n      address.toString(),\r\n      'get_total_supply'\r\n    )\r\n\r\n    // Получаем NFT по индексам\r\n    for (let i = 0; i < Number(totalSupply); i++) {\r\n      try {\r\n        // Получаем адрес NFT по индексу\r\n        const nftAddress = await tonweb.provider.call2(\r\n          address.toString(),\r\n          'get_nft_address_by_index',\r\n          [['num', i.toString()]]\r\n        )\r\n\r\n        // Получаем данные NFT\r\n        const nftData = await tonweb.provider.call2(\r\n          nftAddress.toString(),\r\n          'get_nft_data'\r\n        )\r\n\r\n        // Пытаемся получить метаданные\r\n        let metadata: NFTMetadata = {\r\n          name: `NFT #${i}`,\r\n          description: 'TON NFT',\r\n          image: 'https://placehold.co/400x400/2a2a2a/white?text=TON+NFT'\r\n        }\r\n\r\n        if (nftData.content) {\r\n          try {\r\n            // Предполагаем, что content - это URI метаданных\r\n            const metadataResponse = await axios.get(nftData.content)\r\n            metadata = metadataResponse.data\r\n          } catch (metadataError) {\r\n            console.warn(`Failed to fetch metadata for NFT #${i}:`, metadataError)\r\n          }\r\n        }\r\n\r\n        nfts.push({\r\n          id: nftAddress.toString(),\r\n          address: nftAddress.toString(),\r\n          metadata\r\n        })\r\n      } catch (nftError) {\r\n        console.warn(`Failed to fetch NFT #${i}:`, nftError)\r\n        continue\r\n      }\r\n    }\r\n\r\n    return nfts\r\n  } catch (error) {\r\n    console.error('Error fetching NFTs using TonWeb:', error)\r\n    throw new Error('Failed to fetch NFTs from collection')\r\n  }\r\n} ","import { useState, useEffect } from 'react'\r\nimport { fetchNFTsByCollection, NFTItem } from '../services/nftService'\r\n\r\nexport function useNFTCollection(collectionAddress: string) {\r\n  const [nfts, setNfts] = useState<NFTItem[]>([])\r\n  const [loading, setLoading] = useState(false)\r\n  const [error, setError] = useState<string | null>(null)\r\n\r\n  const fetchNFTs = async () => {\r\n    try {\r\n      setLoading(true)\r\n      setError(null)\r\n\r\n      const fetchedNFTs = await fetchNFTsByCollection(collectionAddress)\r\n      setNfts(fetchedNFTs)\r\n    } catch (err) {\r\n      setError(err instanceof Error ? err.message : 'Failed to fetch NFTs')\r\n      console.error('Error fetching NFTs:', err)\r\n    } finally {\r\n      setLoading(false)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (collectionAddress) {\r\n      fetchNFTs()\r\n    }\r\n  }, [collectionAddress])\r\n\r\n  return { nfts, loading, error, refetch: fetchNFTs }\r\n} ","import { useNFTCollection } from '../hooks/useNFTCollection'\r\nimport './NFTGallery.css'\r\n\r\ninterface NFTGalleryProps {\r\n  collectionAddress: string\r\n}\r\n\r\nexport function NFTGallery({ collectionAddress }: NFTGalleryProps) {\r\n  const { nfts, loading, error } = useNFTCollection(collectionAddress)\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"nft-loading\">\r\n        <div className=\"loader\"></div>\r\n        <p>Loading NFTs from collection...</p>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <div className=\"nft-error\">\r\n        <p>Error: {error}</p>\r\n        <p className=\"error-details\">Collection Address: {collectionAddress}</p>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  if (!nfts.length) {\r\n    return (\r\n      <div className=\"nft-empty\">\r\n        <h2>No NFTs Found</h2>\r\n        <p>This collection appears to be empty or is still loading.</p>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className=\"nft-gallery\">\r\n      <h2>Collection NFTs</h2>\r\n      <div className=\"collection-info\">\r\n        <p>Collection Address: {collectionAddress}</p>\r\n        <p>Total NFTs: {nfts.length}</p>\r\n      </div>\r\n      <div className=\"nft-grid\">\r\n        {nfts.map((nft) => (\r\n          <div key={nft.id} className=\"nft-card\">\r\n            <div className=\"nft-image-container\">\r\n              <img src={nft.metadata.image} alt={nft.metadata.name} className=\"nft-image\" />\r\n            </div>\r\n            <div className=\"nft-info\">\r\n              <h3>{nft.metadata.name}</h3>\r\n              <p className=\"nft-description\">{nft.metadata.description}</p>\r\n              <p className=\"nft-address\">\r\n                Address: {nft.address.slice(0, 6)}...{nft.address.slice(-4)}\r\n              </p>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  )\r\n} ","import { TonConnectButton } from '@tonconnect/ui-react'\r\nimport { useTonConnect } from './hooks/useTonConnect'\r\nimport { NFTGallery } from './components/NFTGallery'\r\nimport './App.css'\r\n\r\n// Адрес вашей NFT коллекции\r\nconst COLLECTION_ADDRESS = 'EQAaTIR7oJyowDiumYLVN0oe61kGE3I6EPEn7WgHPGuWAeCy'\r\n\r\nfunction App() {\r\n  const { connected } = useTonConnect()\r\n\r\n  return (\r\n    <div className=\"app-container\">\r\n      <header className=\"app-header\">\r\n        <h1>TON NFT Gallery</h1>\r\n        <TonConnectButton />\r\n      </header>\r\n      \r\n      <main className=\"app-main\">\r\n        {connected ? (\r\n          <NFTGallery collectionAddress={COLLECTION_ADDRESS} />\r\n        ) : (\r\n          <div className=\"welcome-message\">\r\n            <h2>Welcome to TON NFT Gallery</h2>\r\n            <p>Please connect your Tonkeeper wallet to view the NFT collection</p>\r\n          </div>\r\n        )}\r\n      </main>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App ","import { useRouteError } from 'react-router-dom'\r\n\r\nexport default function ErrorPage() {\r\n  const error = useRouteError() as Error\r\n\r\n  return (\r\n    <div className=\"error-page\">\r\n      <h1>Oops!</h1>\r\n      <p>Sorry, an unexpected error has occurred.</p>\r\n      <p>\r\n        <i>{error?.message || 'Unknown error'}</i>\r\n      </p>\r\n      <button onClick={() => window.location.href = '/IVXX420.github.io/'}>\r\n        Return to Home\r\n      </button>\r\n    </div>\r\n  )\r\n} ","import { createBrowserRouter } from 'react-router-dom'\r\nimport App from './App'\r\nimport ErrorPage from './components/ErrorPage'\r\n\r\nexport const router = createBrowserRouter(\r\n  [\r\n    {\r\n      path: '/',\r\n      element: <App />,\r\n      errorElement: <ErrorPage />,\r\n    },\r\n  ],\r\n  {\r\n    basename: '/IVXX420.github.io',\r\n  }\r\n) ","import React from 'react'\r\nimport ReactDOM from 'react-dom/client'\r\nimport { TonConnectUIProvider } from '@tonconnect/ui-react'\r\nimport { RouterProvider } from 'react-router-dom'\r\nimport { router } from './router'\r\nimport './index.css'\r\n\r\n// Manifest for TonConnect\r\nconst manifestUrl = 'https://ivxx420.github.io/IVXX420.github.io/tonconnect-manifest.json'\r\n\r\nReactDOM.createRoot(document.getElementById('root')!).render(\r\n  <React.StrictMode>\r\n    <TonConnectUIProvider manifestUrl={manifestUrl}>\r\n      <RouterProvider router={router} />\r\n    </TonConnectUIProvider>\r\n  </React.StrictMode>,\r\n) "],"names":["f","require$$0","k","l","m","n","p","q","c","a","g","b","d","e","h","reactJsxRuntime_production_min","jsxRuntimeModule","useTonConnect","tonConnectUI","useTonConnectUI","fetchNFTsByCollection","collectionAddress","useNFTCollection","nfts","setNfts","useState","loading","setLoading","error","setError","fetchNFTs","fetchedNFTs","err","useEffect","NFTGallery","jsxs","jsx","nft","COLLECTION_ADDRESS","App","connected","TonConnectButton","ErrorPage","useRouteError","router","createBrowserRouter","manifestUrl","ReactDOM","React","TonConnectUIProvider","RouterProvider"],"mappings":";;;;;;;;GASa,IAAIA,EAAEC,EAAiBC,EAAE,OAAO,IAAI,eAAe,EAAEC,EAAE,OAAO,IAAI,gBAAgB,EAAEC,EAAE,OAAO,UAAU,eAAeC,EAAEL,EAAE,mDAAmD,kBAAkBM,EAAE,CAAC,IAAI,GAAG,IAAI,GAAG,OAAO,GAAG,SAAS,EAAE,EAClP,SAASC,EAAEC,EAAEC,EAAEC,EAAE,CAAC,IAAIC,EAAEC,EAAE,GAAGC,EAAE,KAAKC,EAAE,KAAcJ,IAAT,SAAaG,EAAE,GAAGH,GAAYD,EAAE,MAAX,SAAiBI,EAAE,GAAGJ,EAAE,KAAcA,EAAE,MAAX,SAAiBK,EAAEL,EAAE,KAAK,IAAIE,KAAKF,EAAEL,EAAE,KAAKK,EAAEE,CAAC,GAAG,CAACL,EAAE,eAAeK,CAAC,IAAIC,EAAED,CAAC,EAAEF,EAAEE,CAAC,GAAG,GAAGH,GAAGA,EAAE,aAAa,IAAIG,KAAKF,EAAED,EAAE,aAAaC,EAAWG,EAAED,CAAC,aAAIC,EAAED,CAAC,EAAEF,EAAEE,CAAC,GAAG,MAAM,CAAC,SAAST,EAAE,KAAKM,EAAE,IAAIK,EAAE,IAAIC,EAAE,MAAMF,EAAE,OAAOP,EAAE,OAAO,CAAC,YAAkBF,EAAaY,EAAA,IAACR,EAAEQ,EAAA,KAAaR,ECPjWS,EAAA,QAAUf,uBCDf,EAAIA,eAEe,EAAE,yBACD,EAAE,YCHnB,SAASgB,GAAgB,CACxB,KAAA,CAACC,CAAY,EAAIC,EAAgB,EAEhC,MAAA,CACL,UAAWD,EAAa,UACxB,OAAQA,EAAa,QACrB,QAAS,IAAM,CACbA,EAAa,cAAc,CAC7B,EACA,WAAY,IAAM,CAChBA,EAAa,WAAW,CAAA,CAE5B,CACF,CCGA,eAAsBE,EAAsBC,EAA+C,CAEjF,MAAA,IAAI,MAAM,6EAA6E,CAqCjG,CCtDO,SAASC,EAAiBD,EAA2B,CAC1D,KAAM,CAACE,EAAMC,CAAO,EAAIC,EAAAA,SAAoB,CAAA,CAAE,EACxC,CAACC,EAASC,CAAU,EAAIF,EAAAA,SAAS,EAAK,EACtC,CAACG,EAAOC,CAAQ,EAAIJ,EAAAA,SAAwB,IAAI,EAEhDK,EAAY,SAAY,CACxB,GAAA,CACFH,EAAW,EAAI,EACfE,EAAS,IAAI,EAEP,MAAAE,EAAc,MAAMX,EAAsBC,CAAiB,EACjEG,EAAQO,CAAW,QACZC,EAAK,CACZH,EAASG,aAAe,MAAQA,EAAI,QAAU,sBAAsB,EAC5D,QAAA,MAAM,uBAAwBA,CAAG,CAAA,QACzC,CACAL,EAAW,EAAK,CAAA,CAEpB,EAEAM,OAAAA,EAAAA,UAAU,IAAM,CACVZ,GACQS,EAAA,CACZ,EACC,CAACT,CAAiB,CAAC,EAEf,CAAE,KAAAE,EAAM,QAAAG,EAAS,MAAAE,EAAO,QAASE,CAAU,CACpD,CCvBgB,SAAAI,EAAW,CAAE,kBAAAb,GAAsC,CACjE,KAAM,CAAE,KAAAE,EAAM,QAAAG,EAAS,MAAAE,CAAM,EAAIN,EAAiBD,CAAiB,EAEnE,OAAIK,EAEAS,EAAA,KAAC,MAAI,CAAA,UAAU,cACb,SAAA,CAACC,EAAAA,IAAA,MAAA,CAAI,UAAU,QAAS,CAAA,EACxBA,EAAAA,IAAC,KAAE,SAA+B,iCAAA,CAAA,CAAA,EACpC,EAIAR,EAEAO,EAAA,KAAC,MAAI,CAAA,UAAU,YACb,SAAA,CAAAA,OAAC,IAAE,CAAA,SAAA,CAAA,UAAQP,CAAA,EAAM,EACjBO,EAAAA,KAAC,IAAE,CAAA,UAAU,gBAAgB,SAAA,CAAA,uBAAqBd,CAAA,CAAkB,CAAA,CAAA,EACtE,EAICE,EAAK,OAURY,EAAA,KAAC,MAAI,CAAA,UAAU,cACb,SAAA,CAAAC,EAAAA,IAAC,MAAG,SAAe,iBAAA,CAAA,EACnBD,EAAAA,KAAC,MAAI,CAAA,UAAU,kBACb,SAAA,CAAAA,OAAC,IAAE,CAAA,SAAA,CAAA,uBAAqBd,CAAA,EAAkB,SACzC,IAAE,CAAA,SAAA,CAAA,eAAaE,EAAK,MAAA,CAAO,CAAA,CAAA,EAC9B,EACAa,EAAA,IAAC,MAAI,CAAA,UAAU,WACZ,SAAAb,EAAK,IAAKc,GACTF,EAAA,KAAC,MAAiB,CAAA,UAAU,WAC1B,SAAA,CAAAC,MAAC,MAAI,CAAA,UAAU,sBACb,SAAAA,EAAA,IAAC,OAAI,IAAKC,EAAI,SAAS,MAAO,IAAKA,EAAI,SAAS,KAAM,UAAU,WAAY,CAAA,EAC9E,EACAF,EAAAA,KAAC,MAAI,CAAA,UAAU,WACb,SAAA,CAACC,EAAA,IAAA,KAAA,CAAI,SAAIC,EAAA,SAAS,KAAK,QACtB,IAAE,CAAA,UAAU,kBAAmB,SAAAA,EAAI,SAAS,YAAY,EACzDF,EAAAA,KAAC,IAAE,CAAA,UAAU,cAAc,SAAA,CAAA,YACfE,EAAI,QAAQ,MAAM,EAAG,CAAC,EAAE,MAAIA,EAAI,QAAQ,MAAM,EAAE,CAAA,CAC5D,CAAA,CAAA,CACF,CAAA,CAAA,GAVQA,EAAI,EAWd,CACD,CACH,CAAA,CAAA,EACF,EA9BEF,EAAA,KAAC,MAAI,CAAA,UAAU,YACb,SAAA,CAAAC,EAAAA,IAAC,MAAG,SAAa,eAAA,CAAA,EACjBA,EAAAA,IAAC,KAAE,SAAwD,0DAAA,CAAA,CAAA,EAC7D,CA6BN,CCxDA,MAAME,EAAqB,mDAE3B,SAASC,GAAM,CACP,KAAA,CAAE,UAAAC,CAAU,EAAIvB,EAAc,EAGlC,OAAAkB,EAAA,KAAC,MAAI,CAAA,UAAU,gBACb,SAAA,CAACA,EAAAA,KAAA,SAAA,CAAO,UAAU,aAChB,SAAA,CAAAC,EAAAA,IAAC,MAAG,SAAe,iBAAA,CAAA,QAClBK,EAAiB,CAAA,CAAA,CAAA,EACpB,EAECL,EAAA,IAAA,OAAA,CAAK,UAAU,WACb,SACCI,EAAAJ,EAAAA,IAACF,EAAW,CAAA,kBAAmBI,CAAoB,CAAA,EAElDH,EAAA,KAAA,MAAA,CAAI,UAAU,kBACb,SAAA,CAAAC,EAAAA,IAAC,MAAG,SAA0B,4BAAA,CAAA,EAC9BA,EAAAA,IAAC,KAAE,SAA+D,iEAAA,CAAA,CAAA,CAAA,CACpE,CAEJ,CAAA,CAAA,EACF,CAEJ,CC5BA,SAAwBM,GAAY,CAClC,MAAMd,EAAQe,EAAc,EAG1B,OAAAR,EAAA,KAAC,MAAI,CAAA,UAAU,aACb,SAAA,CAAAC,EAAAA,IAAC,MAAG,SAAK,OAAA,CAAA,EACTA,EAAAA,IAAC,KAAE,SAAwC,0CAAA,CAAA,QAC1C,IACC,CAAA,SAAAA,EAAA,IAAC,KAAG,UAAOR,GAAA,YAAAA,EAAA,UAAW,gBAAgB,CACxC,CAAA,EACAQ,MAAC,UAAO,QAAS,IAAM,OAAO,SAAS,KAAO,sBAAuB,SAErE,gBAAA,CAAA,CAAA,EACF,CAEJ,CCbO,MAAMQ,EAASC,EACpB,CACE,CACE,KAAM,IACN,cAAUN,EAAI,EAAA,EACd,mBAAeG,EAAU,CAAA,CAAA,CAAA,CAE7B,EACA,CACE,SAAU,oBAAA,CAEd,ECPMI,EAAc,uEAEpBC,EAAS,WAAW,SAAS,eAAe,MAAM,CAAE,EAAE,OACpDX,EAAA,IAACY,EAAM,WAAN,CACC,SAAAZ,EAAAA,IAACa,EAAqB,CAAA,YAAAH,EACpB,SAACV,EAAA,IAAAc,EAAA,CAAe,OAAAN,CAAgB,CAAA,CAClC,CAAA,CACF,CAAA,CACF","x_google_ignoreList":[0,1,2]}